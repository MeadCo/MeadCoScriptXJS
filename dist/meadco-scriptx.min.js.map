{"version":3,"file":"meadco-scriptx.min.js","mappings":"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","sources":["webpack://meadco-scriptxjs/./src/meadco-scriptx.js"],"sourcesContent":["/**\r\n * Simple wrappers on the MeadCo ScriptX objects 'factory', 'factory.printing' and 'secmgr' with additional helper functions.\r\n * \r\n * The implementation is for use in a browser only, not general runtime javascript environments and the code is necessarily 'old-fashioned' as it may find itself running in old versions of IE.\r\n *\r\n * ## Introduction\r\n * \r\n * The library provides two objects within the MeadCo 'namespace':\r\n * \r\n * | Object | Purpose | \r\n * |---|---| \r\n * | MeadCo.ScriptX | wraps the classic 'factory' (MeadCo.ScriptX.Utils) and factory.printing (MeadCo.ScriptX.Printing) objects and provides useful helper functions for common processes.|\r\n * | MeadCo.Licensing | wraps the classic 'secmgr' object. |\r\n *\r\n * ### MeadCo.ScriptX\r\n * \r\n * The &lt;object /&gt; tag for ScriptX factory is assumed to have an id of 'factory', call MeadCo.ScriptX.Init() (or MeadCo.ScriptX.InitAsync()) to connect the wrappers to underlying implementations - returns true on success.\r\n *\r\n * 2 objects will then be available:22\r\n * \r\n * | Object | |\r\n * |--- |---| \r\n * | MeadCo.ScriptX.Utils |  the 'factory' object with all the properties and methods [as documented]{@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/factory} |\r\n * | MeadCo.ScriptX.Printing | the 'factory.printing' object with all the properties and methods [as documented]{@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing}, e.g. MeadCo.ScriptX.Printing.header = \"My Report header\". |\r\n *\r\n * ### MeadCo.Licensing\r\n * \r\n * The &lt;object /&gt; tag for MeadCo Security Manager is assumed to have an id of 'secmgr', call MeadCo.Licensing.IsLicensed() to test if the licensed is valid for the document and has been installed/accepted.\r\n * \r\n * ## Use with ScriptX.Services\r\n * \r\n * MeadCoScriptXJS supports working with ScriptX.Services or ScriptX.Add-on and so this librray provides an abstraction and helper functions for working seamlessly with either ScriptX.Addon or ScriptX.Services. This works by\r\n * utilising the [MeadCo ScriptX.Services Client Library]{@link https://meadco.github.io/ScriptX.Print.Client/} emulation of 'factory' and 'secmgr'. When both libraries are present, on IE 11 with ScriptX.Addon available it will \r\n * take priority. On any other browser ScriptX.Services will be used.\r\n * \r\n * Async scenarios with ScriptX.Print Services are supported by providing async wrappers on ScriptX.Addon functions with promises. A promise polyfill is required if promise is\r\n * not implemented in the browser we recommend (and test with) https://github.com/taylorhakes/promise-polyfill.\r\n * \r\n * @example <caption>Example of initialisation and use of wrappers</caption>\r\n *  $(window).on('load', function () {\r\n *    if ( MeadCo.ScriptX.Init() (\r\n *    {\r\n *       $(\"#info\").text(\"ScriptX version: \" + MeadCo.ScriptX.GetComponentVersion(\"scriptx.factory\"));\r\n *       MeadCo.ScriptX.Printing.header =\r\n *        \"MeadCo's ScriptX&b:&p of &P:&bBasic Printing Sample\";\r\n *      MeadCo.ScriptX.Printing.footer =\r\n *        \"The de facto standard for advanced web-based printing\";\r\n *      MeadCo.ScriptX.Printing.orientation = \"landscape\";\r\n *      $(\"#btnprint\").click(function() {\r\n *          MeadCo.ScriptX.PrintPage(false);\r\n *   }\r\n * });\r\n * \r\n * @example <caption>Example of MeadCo.Licensing.IsLicensed()</caption>\r\n * if ( MeadCo.Licensing.IsLicensed() ) {\r\n *  \t...\r\n * }\r\n * else {\r\n *    MeadCo.Licensing.ReportError();\r\n * }\r\n *\r\n * @namespace MeadCoScriptX\r\n */\r\n\r\n// v1.4.0 and later require a promise polyfill if not implemented in the browser\r\n//  we recommend (and test with) https://github.com/taylorhakes/promise-polyfill\r\n//\r\n// v1.3.0 and later introduce an async model to enable async scenarios with ScriptX.Print Services.\r\n//\r\n// v1.2.0 and later include support for working with ScriptX Services via a polyfill\r\n//  - include meadco-scriptxfactory.js before this file and call MeadCo.ScriptX.Print.HTML.connect() \r\n//  see https://meadco.github.io/ScriptX.Print.Client/\r\n//\r\n//\r\n\r\n// MeadCo.ScriptX - static singleton instances.\r\n//\r\n(function (topLevelNs) {\r\n    \"use strict\";\r\n\r\n    if (typeof topLevelNs[\"ScriptX\"] === \"undefined\") {\r\n        console.log(\"intialising new ScriptX package\");\r\n        topLevelNs.ScriptX = {};\r\n    }\r\n\r\n    const version = \"1.10.5\";\r\n    let scriptx = topLevelNs.ScriptX;\r\n\r\n    /**\r\n     * Enum to describe the implementation being wrapped : .Addon or .Services\r\n     * \r\n     * @typedef {number} Connection\r\n     * @enum {Connection}\r\n     * @memberof MeadCoScriptX\r\n     * @readonly\r\n     * @property {number} NONE 0 no connection wrapped (initialise not called or failed)\r\n     * @property {number} ADDON 1 ScriptX.Addon is being wrapped\r\n     * @property {number} SERVICE 2 ScriptX.Services is being wrapped\r\n     */\r\n    const enumConnection = {\r\n        NONE: 0,\r\n        ADDON: 1,\r\n        SERVICE: 2\r\n    };\r\n\r\n    /**\r\n     * Enum to describe the units used on measurements. These values do match the values used by the MeadCo ScriptX COM Servers. \r\n     *\r\n     * @typedef {number} MeasurementUnits\r\n     * @enum {MeasurementUnits}\r\n     * @memberof MeadCoScriptX\r\n     * @readonly\r\n     * @property {number} DEFAULT 0 use the default at the print server\r\n     * @property {number} MM 1 millimeters  \r\n     * @property {number} INCHES 2 inches\r\n     */\r\n    const enumMeasurementUnits = {\r\n        DEFAULT: 0,\r\n        MM: 1,\r\n        INCHES: 2\r\n    };\r\n\r\n    /**\r\n     * @typedef Margins\r\n     * @memberof MeadCoScriptX\r\n     * @property {number} left\r\n     * @property {number} right\r\n     * @property {number} top\r\n     * @property {number} bottom\r\n     *\r\n     */\r\n\r\n    /**\r\n     * Describe pagesetup - orientation and the margins to use\r\n     * \r\n     * @typedef {Object} PageSetup\r\n     * @memberof MeadCoScriptX\r\n     * @property {MeasurementUnits} units The units used for margins\r\n     * @property {string} orientation valid values are 'landscape' and 'portrait'\r\n     * @property {Margins} margins the margins to use\r\n     */\r\n\r\n\r\n    /**\r\n     * @typedef {Object} PrintSettings\r\n     * @memberof MeadCoScriptX\r\n     * @property {string} header\r\n     * @property {string} footer \r\n     * @property {PageSetup} pageSetup\r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} ServiceConnection\r\n     * @memberof MeadCoScriptX\r\n     * @property {string} serverUrl\r\n     * @property {string} licenseGuid\r\n     * @property {number} licenseRevision\r\n     * @property {string} licensePath\r\n     * \r\n     */\r\n\r\n    /**\r\n     * @typedef {Object} StartupSettings\r\n     * @memberof MeadCoScriptX\r\n     * @property {ServiceConnection} serviceConnection;\r\n     * @property {PrintSettings} printSettings\r\n     */\r\n\r\n    console.log(\"Initialising MeadCo.ScriptX: \" + version);\r\n\r\n    // expose enumerations\r\n    scriptx.MeasurementUnits = enumMeasurementUnits;\r\n    scriptx.Connection = enumConnection;\r\n    scriptx.Factory = null;\r\n    scriptx.Printing = null;\r\n    scriptx.Utils = null;\r\n\r\n    // for documentation\r\n\r\n    /**\r\n     * The discovered connection - NONE, ADDON or SERVICE\r\n     * @memberof MeadCoScriptX\r\n     * @readonly \r\n     */\r\n    let Connector = enumConnection.NONE;\r\n\r\n    /**\r\n     * The semver version of this library\r\n    * @memberof MeadCoScriptX\r\n    * @readonly\r\n    */\r\n    const LibVersion = version;\r\n\r\n    // exposed values.\r\n    scriptx.Connector = enumConnection.NONE;\r\n    scriptx.LibVersion = version;\r\n\r\n    /**\r\n     * Perform full asynchronous initialisation - for services, connecting to a server, then for addon and services connecting to a secmgr implementation, checking for a \r\n     * license and connecting to factory and printing implementations. \r\n     * \r\n     * Lastly apply print settings as defined.\r\n     * \r\n     * This is the preferred library initialisation call especially when wishing to support working with ScriptX.Services as it a) ensures a license is available\r\n     * before attempting services calls and b) is asynchronous and c) hides a lot of code in a simple call.\r\n     * \r\n     * @function StartAsync\r\n     * @memberof MeadCoScriptX\r\n     * @param {StartupSettings} settings\r\n     * @returns {Promise} Promise object presents .connection (implementation type) and .license (detail) to resolve and error message to reject\r\n     * @example\r\n     *  $(window).on('load', function () {\r\n     *    MeadCo.ScriptX.StartAsync({\r\n     *          serviceConnection: {\r\n     *              serverUrl: \"http://127.0.0.1:41191\",\r\n     *              licenseGuid: \"{370000ED-D40C-43D4-B3D3-F2E7D2EFF47D}\", // invalid example, use same as for addon\r\n     *              licenseRevision: 0,\r\n     *              licensePath: \"warehouse\"\r\n     *          },\r\n     *          printSettings: {\r\n     *              header: \"Page &p of &P\",\r\n     *              footer: \"&D\",\r\n     *              pageSetup: {\r\n     *                  orientation: \"landscape\"\r\n     *              }              \r\n     *          }\r\n     *      })\r\n     *      .then(function() {\r\n     *          $(\"#btn-print\").click(function() {\r\n     *              MeadCo.ScriptX.PrintPage(false);\r\n     *          });\r\n     *      })\r\n     *      .catch(function(e) {\r\n     *          alert(\"An error occurred, printing will not be available.\\n\\n\"+e);\r\n     *      });\r\n     */\r\n    scriptx.StartAsync = function (settings) {\r\n        return new Promise(function (resolve, reject) {\r\n            ifServiceSettingsThenConnect(settings)\r\n                .then(function () {\r\n                    MeadCo.Licensing.IsLicensedAsync()\r\n                        .then(function (license) {\r\n                            MeadCo.ScriptX.InitAsync()\r\n                                .then(function (connection) {\r\n                                    // good to go, apply any given settings ...\r\n                                    try {\r\n                                        if (settings && settings.printSettings) {\r\n                                            applySettings(settings.printSettings);\r\n                                        }\r\n                                        resolve({\r\n                                            license: license,\r\n                                            connection: connection\r\n                                        });\r\n                                    }\r\n                                    catch (e) {\r\n                                        console.error(\"Exception while applying settings: \" + e.message);\r\n                                        if (reject) {\r\n                                            reject(e.message)\r\n                                        }\r\n                                    }\r\n                                })\r\n                                .catch(function (errorMessage) {\r\n                                    if (reject) {\r\n                                        reject(errorMesssage);\r\n                                    }\r\n                                });\r\n                        })\r\n                        .catch(function (errorMessage) {\r\n                            if (reject) {\r\n                                reject(errorMessage);\r\n                            }\r\n                        });\r\n                })\r\n                .catch(function (errorMessage) {\r\n                    if (reject) {\r\n                        reject(errorMessage);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Performs synchronous initialisation by discovering and connecting to either ScriptX.Addon or\r\n    * the MeadCo ScriptX.Services Client Library emulation of the 'factory' object.\r\n    * \r\n    * With ScriptX.Print Services this will use a synchronous (blocking, deprecated) call to the server.\r\n    * \r\n    * From v1.9.0 this function also initialises licensing when ScriptX.Services is being used by the browser\r\n    * to reduce required coding updates where MeadCo.ScriptX.Init() has been used.\r\n    * \r\n    * @see {@link https://meadco.github.io/ScriptX.Print.Client/ | MeadCo ScriptX.Services Client Library}\r\n    * \r\n    * @function Init\r\n    * @memberof MeadCoScriptX\r\n    * @returns {boolean} true if initialisation succeeded and implementations of the MeadCo ScriptX factory and printing objects are available, false if failed\r\n    */\r\n    scriptx.Init = function () {\r\n        if (scriptx.Printing === null) {\r\n            console.log(\"scriptx.Init()\");\r\n            if (findFactory(true) !== null) {\r\n                // if we are connected to the ScriptX.Print implementation\r\n                // then check it has connected.\r\n                if (typeof scriptx.Printing.PolyfillInit === \"function\") {\r\n                    console.log(\"found ScriptX.Print Services\");\r\n                    console\r\n                        .warn(\"Synchronous initialisation is deprecated - please update to MeadCo.ScriptX.InitAsync().\");\r\n\r\n                    // All ScriptX.Services require the license is already available which my require (4WPC) \r\n                    // a post to the server before intialisation can be completed. This is not a code organisation\r\n                    // that was required by .Addon and so was not coded that way -- we'll force the license\r\n                    // initialisatinon here. Any code following this call that tests/initialises licencing will\r\n                    // already be primed.\r\n                    if (!MeadCo.Licensing.IsLicensed() || !scriptx.Printing.PolyfillInit()) {\r\n                        console.warn(\"scriptx.Init() licensing or polyfillinit failed.\");\r\n                        scriptx.Printing = null;\r\n                        scriptx.Connector = scriptx.Connection.NONE;\r\n                    } else {\r\n                        scriptx.Connector = scriptx.Connection.SERVICE;\r\n                    }\r\n                } else {\r\n                    scriptx.Connector = scriptx.Connection.ADDON;\r\n                }\r\n            } else {\r\n                console.warn(\"** Warning -- no factory **\");\r\n            }\r\n        }\r\n\r\n        return scriptx.Printing !== null;\r\n    };\r\n\r\n    /**\r\n    * Performs asynchronous initialisation by discovering and connecting to either ScriptX.Addon or\r\n    * ScriptX.Services.\r\n    * \r\n    * From v1.9.0 this function also initialises licensing when ScriptX.Services is being used by the browser\r\n    * to reduce required coding updates where MeadCo.ScriptX.Init() has been used. \r\n    * To obtain the license read the property MeadCo.Licensing.LicMgr.License\r\n    *\r\n    *\r\n    * @function InitAsync\r\n    * @memberof MeadCoScriptX\r\n    * @returns {Promise} Promise object represents enum Connection with value of the connection found (NONE, ADDON or SERVICES)\r\n    */\r\n    scriptx.InitAsync = function () {\r\n        let prom;\r\n\r\n        console.log(\"scriptx.InitAsync()\");\r\n        if (scriptx.Printing === null) {\r\n            console.log(\"unknown state ...\");\r\n            prom = new Promise(function (resolve, reject) {\r\n                console.log(\"looking for state ...\");\r\n                if (findFactory(true) !== null) {\r\n                    console.log(\"look for Polyfill ..\");\r\n                    if (typeof scriptx.Printing.PolyfillInitAsync === \"function\") {\r\n                        console.log(\"found async ScriptX.Print Services\");\r\n                        // All ScriptX.Services require the license is already available which my require (4WPC) \r\n                        // a post to the server before intialisation can be completed. This is not a code organisation\r\n                        // that was required by .Addon and so was not coded that way -- we'll force the license\r\n                        // initialisatinon here. Any code following this call that tests/initialises licencing will\r\n                        // already be primed.\r\n                        MeadCo.Licensing.IsLicensedAsync().then(function () {\r\n                            console.log(\"license is available\");\r\n                            scriptx.Printing.PolyfillInitAsync(function () {\r\n                                scriptx.Connector = scriptx.Connection.SERVICE;\r\n                                console.log(\"scriptx.InitAsync() calling resolve ...\");\r\n                                resolve(scriptx.Connector);\r\n                            }, reject);\r\n                        })\r\n                            .catch(function (e) {\r\n                                reject(e);\r\n                            });\r\n                    } else {\r\n                        scriptx.Connector = scriptx.Connection.ADDON;\r\n                        console.log(\"no polyfill, using add-on\");\r\n                        resolve(scriptx.Connector);\r\n                    }\r\n                } else {\r\n                    console.warn(\"** Warning -- no factory **\");\r\n                    if (reject) {\r\n                        reject(\"Unable to find a ScriptX 'factory' object.\");\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // already initialised\r\n            prom = new Promise(function (resolve, reject) {\r\n                resolve(scriptx.Connector);\r\n            });\r\n        }\r\n\r\n        return prom;\r\n    };\r\n\r\n    /**\r\n    *  Initialises the library and ensures that the installed version is at least some version. If ScriptX is available but not the required version an alert dialog is displayed.\r\n    *  \r\n    * @function InitWithVersion\r\n    * @memberof MeadCoScriptX\r\n    * @param {string} strVersion minimum required version number (e.g. \"7.1.2.65\")\r\n    * @returns {boolean} true if initialisation succeeded and implementations of the MeadCo ScriptX factory and printing objects are available at the required version of higher, false if failed\r\n    * @deprecated from version 1.8.0\r\n    */\r\n    scriptx.InitWithVersion = function (strVersion) {\r\n        let bok = false;\r\n        if (scriptx.Init()) {\r\n            bok = scriptx.IsVersion(strVersion);\r\n            if (!bok)\r\n                alert(\"ScriptX v\" + strVersion + \" or later is required.\\nYou are using a previous version and errors may occur.\");\r\n        }\r\n        return bok;\r\n    };\r\n\r\n    /**\r\n    * @function Version\r\n    * @memberof MeadCoScriptX\r\n    * \r\n    * @returns {string} the installed version number of ScriptX (if services is in use then returns the version of ScriptX.Addon being emulated).\r\n    *\r\n    * */\r\n    scriptx.Version = function () {\r\n        return scriptx.GetComponentVersion(\"ScriptX.Factory\");\r\n    };\r\n\r\n    /**\r\n    * @function IsVersion\r\n    * @memberof MeadCoScriptX\r\n    * @param {string} strVersion\r\n    * @returns {boolean} true if the installed version is at least strVersion where strVersion is a dotted version number (e.g. \"7.1.2.65\")\r\n    */\r\n    scriptx.IsVersion = function (strVersion) {\r\n        return scriptx.IsComponentVersion(\"ScriptX.Factory\", strVersion);\r\n    };\r\n\r\n    /**\r\n     * @function IsServices\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} strVersion\r\n     * @returns {boolean} true if ScriptX.Services is/will be used\r\n     *\r\n     */\r\n    scriptx.IsServices = function () {\r\n        let connection = scriptx.Connector;\r\n        // If init() not yet called, try a guess. \r\n        //\r\n        // This relies on the Add-on and the .services client scripts are all included before this script.\r\n        // But, we do not want to perform a full init here because connection data might not have been specified\r\n        console.log(\"IsServices() on connector: \" + connection);\r\n        if (connection === enumConnection.NONE) {\r\n            let p = findFactory(false);\r\n            if (p !== null) {\r\n                connection = typeof p.PolyfillInit === \"function\" ? enumConnection.SERVICE : enumConnection.ADDON;\r\n            }\r\n            else {\r\n                // assume service will be used, for sure the Add.on isnt here\r\n                connection = enumConnection.SERVICE;\r\n            }\r\n        }\r\n\r\n        return connection === enumConnection.SERVICE;\r\n    };\r\n\r\n    /**\r\n     * If services is in use, returns the version of the services server. If addon is in use returns \"\"\r\n     * \r\n     * Requires services 2.9 or later, earlier versions will return the client library version (1.x)\r\n     * \r\n     * @function ServicesVersion\r\n     * @memberof MeadCoScriptX\r\n     * @returns {string}\r\n     * */\r\n    scriptx.ServicesVersion = function () {\r\n        if (scriptx.IsServices()) {\r\n            return scriptx.GetComponentVersion(\"scriptx.services\");\r\n        }\r\n\r\n        return \"\";\r\n    };\r\n\r\n    /**\r\n     * @function IsServicesVersion\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} strVersion\r\n     * @returns {boolean} true if the services server in use is at least strVersion where strVersion is a dotted version number (e.g. \"7.1.2.65\")\r\n     */\r\n    scriptx.IsServicesVersion = function (strVersion) {\r\n        if (scriptx.IsServices()) {\r\n            return scriptx.IsComponentVersion(\"scriptx.services\", strVersion);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * With ScriptX.Addon, printHtml(Ex) and printPdf(Ex) inherit authorisation cookies from the hosting browser. This does not happen with \r\n     * ScriptX.Services and in modern uses the authorisation cookie is hidden from javascript so cannot be automated. The cookie must be exposed \r\n     * in the HTML and passed in with a call to this function.\r\n     * \r\n     * @function ApplyContentAuthorisationCookie\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} strCookie The cookie in form name=value. use \"\" to remove use of  cookie authorisation\r\n     */\r\n    scriptx.SetContentAuthorisationCookie = function (strCookie) {\r\n        if (scriptx.IsServices()) {\r\n            scriptx.Printing.PolyfillAuthorisationCookie = strCookie;\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Print the current document, with optional prompting (no prompt in the internetzone requires a license). This is a wrapper on the Print API.\r\n    * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/Print | Print API}\r\n    * @function PrintPage\r\n    * @memberof MeadCoScriptX\r\n    * @param {boolean} [bPrompt=true] bPrompt True if a dialog is to prompt the user to confirm the print\r\n    * @returns {boolean} true if print was started, otherwise false\r\n    * @deprecated from 1.4 as the return value will be wrong for service since dialogs are async. Use PrintPage2 if the return value matters\r\n    */\r\n    scriptx.PrintPage = function (bPrompt) {\r\n        if (scriptx.Init())\r\n            return scriptx.Printing.Print(bPrompt);\r\n        return false;\r\n    };\r\n\r\n    /**\r\n    * Print the current document, with optional prompting (no prompt in the internetzone requires a license). This is a wrapper on the Print API.\r\n    * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/Print | Print API}\r\n    * @function PrintPage2\r\n    * @memberof MeadCoScriptX\r\n    * @param {boolean} [bPrompt=true] bPrompt\r\n    * @returns {Promise} Promise object represents boolean with value true if the print was started\r\n    */\r\n    scriptx.PrintPage2 = function (bPrompt) {\r\n        return new Promise(function (resolve, reject) {\r\n            if (scriptx.Init()) {\r\n                if (scriptx.Connector === scriptx.Connection.SERVICE) {\r\n                    scriptx.Printing.Print(bPrompt, null, function (dlgOk) {\r\n                        resolve(dlgOk);\r\n                    });\r\n\r\n                } else {\r\n                    resolve(scriptx.Printing.Print(bPrompt));\r\n                }\r\n            }\r\n            else\r\n                reject();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Opens a preview of the printed current document (page). This is a wrapper on the Preview() API.\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/Preview | Preview() API}\r\n     * @function PreviewPage\r\n     * @memberof MeadCoScriptX\r\n     * */\r\n    scriptx.PreviewPage = function () {\r\n        if (scriptx.Init()) {\r\n            scriptx.Printing.Preview();\r\n        }\r\n    };\r\n\r\n    // PrintFrame\r\n    // Print the content of the *named* frame with optional prompting (no prompt in the internetzone requires a license)\r\n\r\n    /**\r\n    * Print the content of the frame, with optional prompting (no prompt in the internetzone requires a license). This is a wrapper on the Print API.\r\n    * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/Print | Print API}\r\n    * @function PrintFrame\r\n    * @memberof MeadCoScriptX\r\n    * @param {string|object} frame The frame object or the name of the frame to be printed.\r\n    * @param {boolean} [bPrompt=true] bPrompt True if a dialog is to prompt the user to confirm the print\r\n    * @returns {boolean} true if print was started, otherwise false\r\n    * @deprecated from 1.4 as the return value will be wrong for service when using prompted printing since dialogs are async. Use PrintFrame2 if the return value matters\r\n     */\r\n    scriptx.PrintFrame = function (frame, bPrompt) {\r\n        if (scriptx.Init())\r\n            return scriptx.Printing.Print(bPrompt, typeof (frame) === \"string\" ? (scriptx.IsVersion(\"6.5.439.30\") ? frame : eval(\"window.\" + frame)) : frame);\r\n        return false;\r\n    };\r\n\r\n    /**\r\n    * Print the content of the frame, with optional prompting (no prompt in the internetzone requires a license). This is a wrapper on the Print API.\r\n    * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/Print | Print API}\r\n    * @function PrintFrame2\r\n    * @memberof MeadCoScriptX\r\n    * @param {string|object} frame The frame object or the name of the frame to be printed.\r\n    * @param {boolean} [bPrompt=true] bPrompt True if a dialog is to prompt the user to confirm the print\r\n    * @returns {Promise} Promise object represents boolean with value true if the print was started\r\n    */\r\n    scriptx.PrintFrame2 = function (frame, bPrompt) {\r\n        return new Promise(function (resolve, reject) {\r\n            if (scriptx.Init()) {\r\n                if (scriptx.Connector === scriptx.Connection.SERVICE) {\r\n                    scriptx.Printing.Print(bPrompt, frame, function (dlgOk) {\r\n                        resolve(dlgOk);\r\n                    });\r\n\r\n                } else {\r\n                    resolve(scriptx.PrintFrame(frame, bPrompt));\r\n                }\r\n            }\r\n            else\r\n                reject();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Opens a preview of the printed frame. This is a wrapper on the Preview() API.\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/Preview | Preview() API}\r\n     * @function PreviewPage\r\n     * @memberof MeadCoScriptX\r\n     * @param {string|object} frame The frame object or the name of the frame to be printed.\r\n     */\r\n    scriptx.PreviewFrame = function (frame) {\r\n        if (scriptx.Init())\r\n            scriptx.Printing.Preview(typeof (frame) === \"string\" ? (scriptx.IsVersion(\"6.5.439.30\") ? frame : eval(\"window.\" + frame)) : frame);\r\n    };\r\n\r\n\r\n    // BackgroundPrintURL - requires license\r\n    // Background download and print the document from the URL. optional print prompt before queuing the print\r\n    // and optional callback function to monitor progress.\r\n    // [optional] fnCallback(status,statusData,data)\r\n    // [optional] data\r\n    // \r\n    // If no callback data provided, use \"Job \" + jobIndex - incrementing on each job\r\n    let jobIndex = 1;\r\n\r\n    /**\r\n     * Download and print an HTML document in the background. This is a wrapper on the PrintHtmlEX() API.\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PrintHTMLEx | PrintHtmlEX() API}.\r\n     * @function BackgroundPrintURL\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} sUrl The url of the (html) document to download and print\r\n     * @param {boolean} [bPrompt=true] bPrompt True if a dialog is to prompt the user to confirm the print\r\n     * @param {callback} [fnCallback=log to console] Callback function called on progress events fnCallback(nStatus, strStatusData, callbackData)\r\n     * @param {object} [data=\"Job\" + incrementing index] Data to pass to the event callback function\r\n     * @returns {boolean} for prompted printing returns true if the user started the print and it was queued, otherwise false. Always returns true for promptless printing   \r\n     * @deprecated from 1.4 as the return value will be wrong for service when using prompted printing since dialogs are async. Use BackgroundPrintURL2 if the return value matters\r\n     */\r\n    scriptx.BackgroundPrintURL = function (sUrl, bPrompt, fnCallback, data) {\r\n        if (scriptx.Init()) {\r\n            if (typeof fnCallback === \"undefined\") {\r\n                fnCallback = progressMonitor;\r\n            }\r\n            if (typeof data === \"undefined\") {\r\n                data = \"Job \" + jobIndex++;\r\n            }\r\n            return scriptx.Printing.PrintHTMLEx(sUrl, bPrompt, fnCallback, data);\r\n        }\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Download and print an HTML document in the background. This is a wrapper on the PrintHtmlEX() API.\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PrintHTMLEx | PrintHtmlEX() API}.\r\n     * @function BackgroundPrintURL2\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} sUrl The url of the (html) document to download and print\r\n     * @param {boolean} [bPrompt=true] bPrompt True if a dialog is to prompt the user to confirm the print\r\n     * @param {callback} [fnCallback=log to console] Callback function called on progress events fnCallback(nStatus, strStatusData, callbackData)\r\n     * @param {object} [data=\"Job\" + incrementing index] Data to pass to the event callback function\r\n     * @returns {Promise} Promise object represents boolean with value true for prompted printing and the user started the print and it was queued. For promptless printing always represents true.\r\n     */\r\n    scriptx.BackgroundPrintURL2 = function (sUrl, bPrompt, fnCallback, data) {\r\n        return new Promise(function (resolve, reject) {\r\n            if (scriptx.Init()) {\r\n\r\n                if (typeof fnCallback === \"undefined\") {\r\n                    fnCallback = progressMonitor;\r\n                }\r\n                if (typeof data === \"undefined\") {\r\n                    data = \"Job \" + jobIndex++;\r\n                }\r\n\r\n                if (scriptx.Connector === scriptx.Connection.SERVICE) {\r\n                    scriptx.Printing.PrintHTMLEx(sUrl, bPrompt, fnCallback, data, function (dlgOk) {\r\n                        resolve(dlgOk);\r\n                    });\r\n                } else {\r\n                    resolve(scriptx.Printing.PrintHTMLEx(sUrl, bPrompt, fnCallback, data));\r\n                }\r\n            }\r\n            else {\r\n                if (reject) {\r\n                    reject();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n      * Background print the html document contained in the string. This is a wrapper on the PrintHtmlEX() API using html:// protocol. \r\n      * \r\n      * Note that processing after call is asynchronous. There is no Promise returning version as the function always returns true (there is no prompting).\r\n      * See MeadCo.ScriptX.WaitForSpoolingComplete() for how to implement synchronous coding.\r\n      * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PrintHTMLEx | PrintHtmlEX() API}.\r\n      * @function BackgroundPrintHTML\r\n      * @memberof MeadCoScriptX\r\n      * @param {string} sHtml The html to print. The document must be complete and well formed.All resource references in the HTML must be fully qualified unless a base element is included.\r\n      * @param {callback} [fnCallback=log to console] Callback function called on progress events fnCallback(nStatus, strStatusData, callbackData)\r\n      * @param {object} [data=\"Job\" + incrementing index] Data to pass to the event callback function\r\n      * @returns {boolean} always returns true\r\n      */\r\n    scriptx.BackgroundPrintHTML = function (sHtml, fnCallback, data) {\r\n        return scriptx.BackgroundPrintURL(\"html://\" + sHtml, false, fnCallback, data);\r\n    };\r\n\r\n    // Direct/RAW printing - requires a license \r\n\r\n    /**\r\n     * Directly print a stream of characters to a printer without formatting, pagination or any other processing. This is a wrapper on the printString() API\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/rawPrinting/printString | printString() API}\r\n     * @function DirectPrintString\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} sPrinterName The name of the printer to print to.\r\n     * @param {string} sData The string (e.g. ZPL) to send directly to the printer as a byte stream\r\n     */\r\n    scriptx.DirectPrintString = function (sPrinterName, sData) {\r\n\r\n        if (scriptx.Init()) {\r\n            let rawPrinter = scriptx.Factory.rawPrinting;\r\n\r\n            rawPrinter.printer = sPrinterName;\r\n            rawPrinter.printString(sData);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Download content from a url and send its contents (e.g. ZPL) directly to the printer as a byte stream. This is a wrapper on the printDocument() API\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/rawPrinting/printDocument | printDocument() API}\r\n     * @function DirectPrintDocument\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} sPrinterName The name of the printer to print to.\r\n     * @param {string} sUrl url of the file whose contents are to be sent to the printer. The url must be a fully qualified url.\r\n     */\r\n    scriptx.DirectPrintDocument = function (sPrinterName, sUrl) {\r\n\r\n        if (scriptx.Init()) {\r\n            var rawPrinter = scriptx.Factory.rawPrinting;\r\n\r\n            rawPrinter.printer = sPrinterName;\r\n            rawPrinter.printDocument(scriptx.Factory.baseURL(sUrl));\r\n        }\r\n    };\r\n\r\n    // Page/Print Setup - these will work with both add-on and service\r\n    // but return value will be wrong for service since dialogs are async\r\n    // If the return value matters use xxxx2 api below.\r\n\r\n    /**\r\n     * Invokes a Page Setup Dialog. This is a wrapper on the PageSetup API\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PageSetup | PageSetup API}\r\n     * @see PageSetup2\r\n     * @function PageSetup\r\n     * @memberof MeadCoScriptX\r\n     * @returns {boolean} true if the user closed the dialog with the OK button, otherwise false.\r\n     * @deprecated from 1.4 as the return value will be wrong for service since dialogs are async. Use PageSetup2 if the return value matters\r\n     */\r\n    scriptx.PageSetup = function () {\r\n        if (scriptx.Init())\r\n            return scriptx.Printing.PageSetup();\r\n        return false;\r\n    };\r\n\r\n    /**\r\n    * Invokes a Print Setup Dialog. This is a wrapper on the PrintSetup API\r\n    * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PrintSetup | PrintSetup API}\r\n    * @see {@link MeadCoScriptX.\"PrintSetup2\" | PrintSetup2 }\r\n    * @function PrintSetup\r\n    * @memberof MeadCoScriptX\r\n    * @returns {boolean} true if the user closed the dialog with the OK button, otherwise false.\r\n    * @deprecated from 1.4 as the return value will be wrong for service since dialogs are async. Use PrintSetup2 if the return value matters\r\n    */\r\n    scriptx.PrintSetup = function () {\r\n        if (scriptx.Init())\r\n            return scriptx.Printing.PrintSetup();\r\n        return false;\r\n    };\r\n\r\n    // Promise versions to work with async dialogs with service\r\n    // These work with both add-on and service.\r\n    //\r\n\r\n    /**\r\n     * Invokes a Page Setup Dialog. This is a wrapper on the PageSetup API\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PageSetup | PageSetup API}\r\n     * @function PageSetup2\r\n     * @memberof MeadCoScriptX\r\n     * @returns {Promise} Promise object represents boolean with value true if the user closed the dialog with the OK button, otherwise false.\r\n     */\r\n    scriptx.PageSetup2 = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            if (scriptx.Init()) {\r\n\r\n                if (scriptx.Connector === scriptx.Connection.SERVICE) {\r\n                    scriptx.Printing.PageSetup(function (dlgOK) {\r\n                        if (dlgOK)\r\n                            resolve();\r\n                        else {\r\n                            if (reject) {\r\n                                reject();\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (scriptx.Printing.PageSetup()) {\r\n                        resolve();\r\n                    } else {\r\n                        if (reject) {\r\n                            reject();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n                reject();\r\n        });\r\n    };\r\n\r\n    /**\r\n    * Invokes a Print Setup Dialog. This is a wrapper on the PrintSetup API\r\n    * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/PrintSetup | PrintSetup API}\r\n    * @function PrintSetup2\r\n    * @memberof MeadCoScriptX\r\n    * @returns {Promise} Promise object represents boolean with value true if the user closed the dialog with the OK button, otherwise false.\r\n    */\r\n    scriptx.PrintSetup2 = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            if (scriptx.Init()) {\r\n                if (scriptx.Connector === scriptx.Connection.SERVICE) {\r\n                    scriptx.Printing.PrintSetup(function (dlgOK) {\r\n                        if (dlgOK)\r\n                            resolve();\r\n                        else {\r\n                            if (reject) {\r\n                                reject();\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    if (scriptx.Printing.PrintSetup()) {\r\n                        resolve();\r\n                    } else {\r\n                        if (reject) {\r\n                            reject();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                if (reject) {\r\n                    reject();\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n    // WaitForSpoolingComplete \r\n    //\r\n    // A wrapper to hide differences between Add-on and ScriptX.Print Services \r\n    //\r\n\r\n    /**\r\n     * Waits for all pending spooling and download operations originated with Print, PrintHTML and BatchPrintPDF to complete. This is useful\r\n     * for providing 'busy' UI or waiting for all jobs to complete before closing a window. \r\n     * \r\n     * This is a wrapper on the common use (no arguments) of the WaitForSpoolingComplete API and returns a Promise so that it can work with\r\n     * both ScriptX.Addon and ScriptX.Services\r\n     * \r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/WaitForSpoolingComplete | WaitForSpoolingComplete API }\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/HowToGuides/ScriptXServices/ThenToNow/Stage7 | Working with ScriptX.Addon and ScriptX.Services }\r\n     * @see {@link https://meadco.github.io/ScriptX.Print.Client/index.html | ScriptX.Services Client Library }\r\n     * @function WaitForSpoolingComplete\r\n     * @memberof MeadCoScriptX\r\n     * @returns {Promise} Promise object represents boolean with value true if all jobs have been completed (will always be true).\r\n     * @example \r\n     * MeadCo.ScriptX.PrintPage(false);\r\n     * MeadCo.ScriptX.WaitForSpoolingComplete().finally(function(bAllJobsComplete) {\r\n     *  self.close();\r\n     * })\r\n     */\r\n    scriptx.WaitForSpoolingComplete = function () {\r\n        if (scriptx.Connector === scriptx.Connection.SERVICE) {\r\n            return new Promise(function (resolve, reject) {\r\n                scriptx.Printing.WaitForSpoolingComplete(-1, resolve);\r\n            });\r\n        }\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            window.setTimeout(function () {\r\n                resolve(scriptx.Printing.WaitForSpoolingComplete());\r\n            }, 1);\r\n        });\r\n\r\n    };\r\n\r\n    /**\r\n     * Ensures orderly closing of a window in ScriptX.Services by waiting for jobs to complete before the window closes. This is done automatically by ScriptX.Addon\r\n     * @function CloseWindow\r\n     * @memberof MeadCoScriptX\r\n     * @param {object} oWindow The window to close\r\n     */\r\n    scriptx.CloseWindow = function (oWindow) {\r\n\r\n        if (scriptx.IsServices()) {\r\n            scriptx.Printing.WaitForSpoolingComplete(5000, function () {\r\n                oWindow.close();\r\n            });\r\n        }\r\n        else {\r\n            oWindow.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @function HasOrientation\r\n     * @memberof MeadCoScriptX\r\n     * @returns {boolean} true if the 'orientation' property is available, otherwise the 'portrait' property must be used.\r\n     * */\r\n    scriptx.HasOrientation = function () {\r\n        return scriptx.IsComponentVersion(\"ScriptX.Factory\", \"7.0.0.1\");\r\n    };\r\n\r\n    // GetAvailablePrinters - requires license\r\n    // returns an array of the names of the printers on the system\r\n    //\r\n\r\n    /** \r\n     * Determnines the names of the printers available pon the device. This function wraps the EnumPrinters API in a more convenient form.\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/printing/EnumPrinters | EnumPrinters API}\r\n     * @function GetAvailablePrinters\r\n     * @memberof MeadCoScriptX\r\n     * @returns {string[]} array of the names of the available printers available.\r\n     * */\r\n    scriptx.GetAvailablePrinters = function () {\r\n        let plist = new Array();\r\n        let name;\r\n        if (scriptx.Init()) {\r\n            try {\r\n                for (var i = 0; (name = scriptx.Printing.EnumPrinters(i)).length > 0; i++) {\r\n                    plist.push(name);\r\n                }\r\n            } catch (e) {\r\n                var x = 1;\r\n            }\r\n        }\r\n        return plist;\r\n    };\r\n\r\n    // GetComponentVersion\r\n    // returns the version number of a COM component - compatible with v7.0 and earlier implementation. (ScriptX v7.1 has an easier to use implementation)\r\n\r\n\r\n    /**\r\n     * Returns the version of an installed component as a dotted version string. This wraps the deprecated API GetComponentVersion which is available\r\n     * with all versions of ScriptX. Use the recommended alternatives.\r\n     * \r\n     * @function GetComponentVersion\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} sComponent The component name, e.g. \"ScriptX.Factory\"\r\n     * @returns {string} Installed version of the component or \"Not installed\"\r\n     * @deprecated since v7 of ScriptX.Addon. Use ScriptX.Utils.ComponentVersionString or ScriptX.Utils.ScriptXVersion or ScriptX.Utils.SecurityManagerVersion\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/factory/ComponentVersionString | ComponentVersionString API}\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/factory/ScriptXVersion | ScriptXVersion API}\r\n     * @see {@link https://www.meadroid.com/Developers/KnowledgeBank/TechnicalReference/ScriptXAddOn/factory/SecurityManagerVersion | SecurityManagerVersion API}\r\n     */\r\n    scriptx.GetComponentVersion = function (sComponent) {\r\n        let a = new Object();\r\n        let b = new Object();\r\n        let c = new Object();\r\n        let d = new Object();\r\n        let s = \"(Not installed)\";\r\n\r\n        try {\r\n            scriptx.Utils.GetComponentVersion(sComponent, a, b, c, d);\r\n            s = a[0] + \".\" + b[0] + \".\" + c[0] + \".\" + d[0];\r\n        }\r\n        catch (e) {\r\n            var x = 1;\r\n        }\r\n\r\n        return s;\r\n    };\r\n\r\n    /**\r\n     * Get the installed version of ScriptX\r\n     * @function ScriptXVersion\r\n     * @memberof MeadCoScriptX\r\n     * @returns {string} Installed version or \"Not installed\"\r\n     */\r\n    scriptx.ScriptXVersion = function () {\r\n        return scriptx.GetComponentVersion(\"ScriptX.Factory\");\r\n    };\r\n\r\n    /**\r\n     * Get the installed version of MeadCo Security Manager\r\n     * @function SecurityManagerVersion\r\n     * @memberof MeadCoScriptX\r\n     * @returns {string} Installed version or \"Not installed\"\r\n     */\r\n    scriptx.SecurityManagerVersion = function () {\r\n        return scriptx.GetComponentVersion(\"MeadCo.SecMgr\");\r\n    };\r\n\r\n    /**\r\n     * Determine if the installed version of a COM component is at least the given version\r\n     * \r\n     * @function IsComponentVersion\r\n     * @memberof MeadCoScriptX\r\n     * @param {string} strComponentName The name of the COM Component \r\n     * @param {string} strVersionRequired minimum version in dotted form\r\n     * @returns {boolean} true is the component is installed and at least the version required.\r\n     */\r\n    scriptx.IsComponentVersion = function (strComponentName, strVersionRequired) {\r\n        return compareVersions(scriptx.GetComponentVersion(strComponentName), strVersionRequired);\r\n    };\r\n\r\n    // Private implementation\r\n\r\n    // findFactory\r\n    //\r\n    // find an instance of 'factory', either the add-on or polyfill, optionally hook up to\r\n    // the module and return the instance of the printing object (in Add-on this creates the object)\r\n    function findFactory(bRecord) {\r\n        let f = window.factory || document.getElementById(\"factory\"); // we assume the <object /> has an id of 'factory'\r\n        if (f && typeof f.object !== \"undefined\" && f.object !== null) {\r\n            if (bRecord) {\r\n                scriptx.Factory = f;\r\n                scriptx.Utils = f.object;\r\n                scriptx.Printing = f.printing;\r\n            }\r\n            console.log(\"found a scriptx factory\");\r\n            return f.printing;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // compareVersions\r\n    //\r\n    // Return true if v1 is later than or equal to v2\r\n    //\r\n    function compareVersions(v1, v2) {\r\n        let a = v1.split(\".\");\r\n        let b = v2.split(\".\");\r\n        let i;\r\n\r\n        if (a.length !== b.length)\r\n            return false;\r\n\r\n        for (i = 0; i < a.length; i++) {\r\n            a[i] = parseInt(a[i]);\r\n            b[i] = parseInt(b[i]);\r\n        }\r\n\r\n        if (a[0] > b[0])\r\n            return true;\r\n\r\n        if (a[0] >= b[0] && a[1] > b[1])\r\n            return true;\r\n\r\n        if (a[0] >= b[0] && a[1] >= b[1] && a[2] > b[2])\r\n            return true;\r\n\r\n        if (a[0] >= b[0] && a[1] >= b[1] && a[2] >= b[2] && a[3] >= b[3])\r\n            return true;\r\n\r\n        return false;\r\n    }\r\n\r\n    // exemplar PrintHTMLEx callback that does nothing (well, it logs to the console)\r\n\r\n    // statusUpdate\r\n    // Display status and/or its description\r\n    function statusUpdate(status, txt) {\r\n        console.log(\"PrintHTML Queue status: \" + status + \" => \" + txt);\r\n    }\r\n\r\n    // progressMonitor\r\n    // callback from PrintHTMLEx / BatchPrintPDFEx\r\n    function progressMonitor(status, statusData, callbackData) {\r\n        switch (status) {\r\n            case 1:\r\n                // v8.2 / 10.2 will passback the queue mode \r\n                statusUpdate(status, \"Request to print has been queued for: \" + callbackData + (typeof statusData === \"undefined\" ? \"\" : \", \" + statusData));\r\n                break;\r\n\r\n            case 2:\r\n                statusUpdate(status, \"Print job started on: \" + callbackData);\r\n                break;\r\n\r\n            case 3:\r\n                statusUpdate(status, \"Downloading \" + statusData + \" for: \" + callbackData);\r\n                break;\r\n\r\n            case 4:\r\n                statusUpdate(status, \"Download completed to \" + statusData + \" for: \" + callbackData);\r\n                break;\r\n\r\n            case 5:\r\n                statusUpdate(status, \"Printing has started for: \" + callbackData);\r\n                break;\r\n\r\n            case 6:\r\n                statusUpdate(status, \"Job complete for: \" + callbackData);\r\n                break;\r\n\r\n            case 7:\r\n                statusUpdate(status, \"Job paused for: \" + callbackData);\r\n                break;\r\n\r\n            case 8:\r\n                statusUpdate(status, \"PDF is being printed: \" + statusData + \" for: \" + callbackData);\r\n                break;\r\n\r\n            case -1:\r\n                statusUpdate(status, \"Print failed because of an error: [\" + statusData + \"] for: \" + callbackData);\r\n                break;\r\n\r\n            case -2:\r\n                statusUpdate(status, \"Printing has been abandoned for: \" + callbackData);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // if the settings describe a service connection then start it up. Otherwise, assume service has been connected by\r\n    // another means (i.e. tag attributes or API) or .Addon is being used.\r\n    //\r\n    // Returns a Promise of resolved or rejected with an error message\r\n    //\r\n    // @param { StartupSettings } settings\r\n    // @returns { Promise } Promise object represents null on success and error message on error.\r\n    //\r\n    function ifServiceSettingsThenConnect(settings) {\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            if (settings && settings.serviceConnection) {\r\n                let sc = settings.serviceConnection;\r\n\r\n                // connect up licensing so can query license.\r\n                MeadCo.ScriptX.Print.Licensing.connect(sc.serverUrl, sc.licenseGuid);\r\n\r\n                if4WPCLicenseApply(sc)\r\n                    .then(function () {\r\n                        MeadCo.ScriptX.Print.HTML.connectAsync(\r\n                            sc.serverUrl,\r\n                            sc.licenseGuid,\r\n                            function () {\r\n                                resolve();\r\n                            },\r\n                            function (errorMsg) {\r\n                                reject(errorMsg);\r\n                            });\r\n                    })\r\n                    .catch(function (e) {\r\n                        reject(e);\r\n                    });\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    // if a 4WPC license (mlf file) is defined then it must be given (applied) to the service before being used.\r\n    // Cloud merely needs the licenseGuid on each call and On Premise needs nothing.\r\n    //\r\n    function if4WPCLicenseApply(sc) {\r\n        return new Promise(function (resolve, reject) {\r\n            if (sc.licensePath && typeof sc.licenseRevision != 'undefined') {\r\n                MeadCo.ScriptX.Print.Licensing.applyAsync(\r\n                    sc.licenseGuid,\r\n                    sc.licenseRevision,\r\n                    sc.licensePath,\r\n                    function () {\r\n                        resolve();\r\n                    },\r\n                    function (errorMsg) {\r\n                        reject(errorMsg);\r\n                    });\r\n            }\r\n            else {\r\n                resolve();\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    // applySetting\r\n    //\r\n    // set given values\r\n    function applySettings(objSettings) {\r\n\r\n        if (typeof objSettings === \"object\") {\r\n            if (typeof objSettings.header === \"string\") {\r\n                MeadCo.ScriptX.Printing.header = objSettings.header;\r\n            }\r\n            if (typeof objSettings.footer === \"string\") {\r\n                MeadCo.ScriptX.Printing.footer = objSettings.footer;\r\n            }\r\n\r\n            if (typeof objSettings.pageSetup === \"object\") {\r\n                var ps = objSettings.pageSetup;\r\n                if (typeof ps.units !== \"undefined\") {\r\n                    MeadCo.ScriptX.Printing.SetMarginMeasure(ps.units);\r\n                }\r\n                if (typeof ps.orientation === \"string\") {\r\n                    MeadCo.ScriptX.Printing.orientation = ps.orientation;\r\n                }\r\n\r\n                if (typeof ps.margins === \"object\") {\r\n                    var m = ps.margins;\r\n\r\n                    if (typeof m.left !== \"undefined\") {\r\n                        MeadCo.ScriptX.Printing.leftMargin = m.left;\r\n                    }\r\n\r\n                    if (typeof m.right !== \"undefined\") {\r\n                        MeadCo.ScriptX.Printing.rightMargin = m.right;\r\n                    }\r\n\r\n                    if (typeof m.top !== \"undefined\") {\r\n                        MeadCo.ScriptX.Printing.topMargin = m.top;\r\n                    }\r\n\r\n                    if (typeof m.bottom !== \"undefined\") {\r\n                        MeadCo.ScriptX.Printing.bottomMargin = m.bottom;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}(window.MeadCo = window.MeadCo || {}));\r\n\r\n// MeadCo.Licensing - singleton\r\n//\r\n\r\n/**\r\n * @namespace MeadCoLicensing\r\n */\r\n\r\n(function (topLeveNs) {\r\n    \"use strict\";\r\n\r\n    topLeveNs.Licensing = {};\r\n\r\n    let licensing = topLeveNs.Licensing;\r\n\r\n    licensing.Connection = {\r\n        NONE: 0,\r\n        ADDON: 1,\r\n        SERVICE: 2\r\n    };\r\n\r\n    licensing.LibVersion = \"1.8.1\";\r\n    licensing.LicMgr = null;\r\n    licensing.Connector = licensing.Connection.NONE;\r\n\r\n    /**\r\n    * Performs synchronous initialisation by discovering and connecting to either COM MeadCo Security Manager or\r\n    * the MeadCo ScriptX.Services Client Library emulation of the 'secmgr' object.\r\n    *\r\n    * With ScriptX.Print Services this will use a synchronous (blocking, deprecated) call to the server\r\n    *\r\n    * @see {@link https://meadco.github.io/ScriptX.Print.Client/ | MeadCo ScriptX.Services Client Library}\r\n    *\r\n    * @function Init\r\n    * @memberof MeadCoLicensing\r\n    * @returns {boolean} true if initialisation succeeded and implementations of the MeadCo Security Manager object is available, false if failed\r\n    * @deprecated due to the synchronous ajax calls, use InitAsync\r\n    */\r\n    licensing.Init = function () {\r\n        if (licensing.LicMgr === null) {\r\n            console.log(\"licensing.Init()\");\r\n            if (findSecMgr()) {\r\n                // what have we connected to?\r\n\r\n                // if we are connected to the ScriptX.Print implementation\r\n                // then check it has connected.\r\n                if (typeof licensing.LicMgr.PolyfillInit === \"function\") {\r\n                    console.log(\"found secmgr services\");\r\n                    console\r\n                        .warn(\"Synchronous initialisation is deprecated - please update to MeadCo.Licensing.InitAsync().\");\r\n                    if (!licensing.LicMgr.PolyfillInit()) {\r\n                        console.log(\"**warning** polyfill failed.\");\r\n                        licensing.LicMgr = null;\r\n                        licensing.Connector = licensing.Connection.NONE;\r\n                    } else {\r\n                        licensing.Connector = licensing.Connection.SERVICE;\r\n                    }\r\n                } else {\r\n                    licensing.Connector = licensing.Connection.ADDON;\r\n                }\r\n            } else {\r\n                console.log(\"** Warning -- no secmgr **\");\r\n            }\r\n        }\r\n        return licensing.LicMgr !== null && typeof (licensing.LicMgr.result) !== \"undefined\";\r\n    };\r\n\r\n    /**\r\n    * Performs asynchronous initialisation by discovering and connecting to either ScriptX.Addon or\r\n    * the MeadCo ScriptX.Services Client Library emulation of the 'secmgr' object.\r\n    *\r\n    * @function InitAsync\r\n    * @memberof MeadCoLicensing\r\n    * @returns {Promise} \r\n    */\r\n    licensing.InitAsync = function () {\r\n        let prom;\r\n\r\n        console.log(\"licensing.InitAsync()\");\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            if (licensing.LicMgr === null) {\r\n                if (findSecMgr()) {\r\n                    console.log(\"Look for polyfill\");\r\n                    if (typeof licensing.LicMgr.PolyfillInitAsync === \"function\") {\r\n                        console.log(\"Found async secmgr services\");\r\n                        licensing.LicMgr.PolyfillInitAsync(function () {\r\n                            console.log(\"polyfill initialised ok\");\r\n                            licensing.Connector = licensing.Connection.SERVICE;\r\n                            resolve();\r\n                        }, reject);\r\n                    } else {\r\n                        console.log(\"No polyfill, using as add-on\");\r\n                        licensing.Connector = licensing.Connection.ADDON;\r\n                        resolve();\r\n                    }\r\n                } else {\r\n                    console.log(\"** Warning -- no secmgr **\");\r\n                    if (reject) {\r\n                        reject(\"ScriptX could not be found - is it installed?\");\r\n                    }\r\n                }\r\n            } else {\r\n                if (licensing.Connector === licensing.Connection.NONE) {\r\n                    if (reject) {\r\n                        reject(\"ScriptX could not be found - is it installed?\");\r\n                    }\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    /**\r\n     * Performs synchronous initialisation \r\n     *\r\n     * @function IsLicensed\r\n     * @memberof MeadCoLicensing\r\n     * @returns {boolean} true if a valid license is available\r\n     *\r\n     */\r\n    licensing.IsLicensed = function () {\r\n\r\n        if (licensing.Init()) {\r\n            if (licensing.Connector === licensing.Connection.SERVICE) {\r\n                let l = licensing.LicMgr.License;\r\n            }\r\n\r\n            return licensing.LicMgr.result === 0 && licensing.LicMgr.validLicense;\r\n        }\r\n\r\n        console.warn(\"WARNING :: MeadCo.Licensing.Init() failed so IsLicensed will return false.\");\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Performs asynchronous initialisation \r\n     *\r\n     * @function IsLicensedAsync\r\n     * @memberof MeadCoLicensing\r\n     * @returns {Promise} Promise object with a resolve of the loaded license detail and reject of the error message\r\n     *\r\n     */\r\n    licensing.IsLicensedAsync = function () {\r\n        return new Promise(function (resolve, reject) {\r\n            licensing.InitAsync()\r\n                .then(function () {\r\n                    if (typeof licensing.LicMgr.GetLicenseAsync === \"function\") {\r\n                        licensing.LicMgr.GetLicenseAsync(resolve, reject);\r\n                    } else {\r\n                        resolve(licensing.LicMgr.License);\r\n                    }\r\n                })\r\n                .catch(function () {\r\n                    if (reject) {\r\n                        reject(lookupError());\r\n                    }\r\n                });\r\n        });\r\n    };\r\n\r\n\r\n    /**\r\n     * Obtain the description of the last error that occurred. \r\n     * \r\n     * @function ErrorMessage\r\n     * @memberof MeadCoLicensing\r\n     * @returns {string} Text description of the last error or if no error has occurred, an empty string\r\n     */\r\n    licensing.ErrorMessage = function () {\r\n        console.log(\"licensing.ErrorMessage - MeadCo Security Manager reports licensed: \" + this.IsLicensed());\r\n        return !licensing.IsLicensed() ? lookupError() : \"\";\r\n    };\r\n\r\n    // ReportError\r\n    // Displays an alert box with details of any licensing error with any given message appended.\r\n\r\n    /**\r\n     * If an error has occurred, displays an alert box with details of the licensing error with any given message appended.\r\n     * \r\n     * @function ReportError\r\n     * @memberof MeadCoLicensing\r\n     * @param {string} msg Text to append to the error message.\r\n     */\r\n    licensing.ReportError = function (msg) {\r\n\r\n        let errMsg = licensing.ErrorMessage();\r\n        if (errMsg !== \"\") {\r\n            reportError(errMsg, msg);\r\n        }\r\n    };\r\n\r\n    // private implementation\r\n    // ErrorMessage\r\n    // returns the error message that describes why licensing failed. returns emoty string if there was no error.\r\n    let errorLicenseMsgs = new Array(\"Unable to locate the MeadCo License Manager object - the component may not be installed.\",\r\n        \"The license for this site is not valid.\",\r\n        \"The license for this site not installed on this machine.\",\r\n        \"The license for this site has not been accepted by the user.\",\r\n        \"There was an error loading the license. \",\r\n        \"There was an error in ScriptX.Services license management.\"\r\n    );\r\n\r\n    function lookupError() {\r\n        let eIndex = -1;\r\n        let msgSuffix = \"\";\r\n\r\n        if (licensing.LicMgr !== null) {\r\n            console.log(\"license result: \" + licensing.LicMgr.result + \" valid: \" + licensing.LicMgr.validLicense);\r\n\r\n            switch (licensing.LicMgr.result) {\r\n                case 0:\r\n                    if (!licensing.LicMgr.validLicense)\r\n                        eIndex = 1;\r\n                    break;\r\n\r\n                case 5: // scriptx.print service error\r\n                    if (typeof licensing.LicMgr.errorMessage === \"string\") {\r\n                        return licensing.LicMgr.errorMessage;\r\n                    }\r\n                    eIndex = 5;\r\n                    break;\r\n\r\n                case 1:\r\n                    // magic value: this only applies if path param not\r\n                    // not given - .result==1 => license not installed\r\n                    eIndex = 2;\r\n                    break;\r\n\r\n                case -2147220500:\r\n                    // magic value: this only applies if a path\r\n                    // was given and the license is valid and was\r\n                    // displayed to the user for acceptance - \r\n                    // .result == -2147220500 => the user clicked cancel on the dialog\r\n                    eIndex = 3;\r\n                    break;\r\n\r\n                // some other error, e.g. download failure - this will\r\n                // have already been displayed to the user in an error box.\r\n                // we could be here in the path given or not given cases if there\r\n                // was an error such as reading the registry, though such errors\r\n                // are unlikely.\r\n                default:\r\n                    eIndex = 4;\r\n                    msgSuffix = \"\\nLicense manager reported error code: 0x\" + (0x100000000 + licensing.LicMgr.result).toString(16).toUpperCase();\r\n                    break;\r\n            }\r\n\r\n        } else {\r\n            eIndex = 0;\r\n        }\r\n\r\n        return (eIndex >= 0) ? errorLicenseMsgs[eIndex] + msgSuffix : \"\";\r\n\r\n    }\r\n\r\n    function reportError(eMsg) {\r\n        let msg = eMsg;\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            if (arguments[i])\r\n                msg += \"\\n\\n\" + arguments[i];\r\n        }\r\n        alert(msg);\r\n    }\r\n\r\n    // try to find the Security Manager add-on on the page.\r\n    // \r\n    function findSecMgr() {\r\n        let l = window.secmgr || document.getElementById(\"secmgr\");  // we assume the <object /> has an id of 'secmgr'\r\n        if (l && l.object !== null && typeof l.object !== \"undefined\") {\r\n            licensing.LicMgr = l.object;\r\n            console.log(\"Found a secmgr: \" + (typeof licensing.LicMgr.result !== \"undefined\"));\r\n            return typeof (licensing.LicMgr.result) !== \"undefined\";\r\n        }\r\n        return false;\r\n    }\r\n\r\n}(window.MeadCo = window.MeadCo || {}));\r\n\r\n"],"names":["topLevelNs","console","log","ScriptX","version","scriptx","enumConnection","NONE","ADDON","SERVICE","enumMeasurementUnits","DEFAULT","MM","INCHES","MeasurementUnits","Connection","Factory","Printing","Utils","Connector","LibVersion","StartAsync","settings","Promise","resolve","reject","ifServiceSettingsThenConnect","then","MeadCo","Licensing","IsLicensedAsync","license","InitAsync","connection","printSettings","applySettings","e","error","message","catch","errorMessage","errorMesssage","Init","findFactory","PolyfillInit","warn","IsLicensed","prom","PolyfillInitAsync","InitWithVersion","strVersion","bok","IsVersion","alert","Version","GetComponentVersion","IsComponentVersion","IsServices","p","ServicesVersion","IsServicesVersion","SetContentAuthorisationCookie","strCookie","PolyfillAuthorisationCookie","PrintPage","bPrompt","Print","PrintPage2","dlgOk","PreviewPage","Preview","PrintFrame","frame","eval","PrintFrame2","PreviewFrame","jobIndex","bRecord","f","window","factory","document","getElementById","object","printing","compareVersions","v1","v2","i","a","split","b","length","parseInt","statusUpdate","status","txt","progressMonitor","statusData","callbackData","serviceConnection","sc","connect","serverUrl","licenseGuid","if4WPCLicenseApply","HTML","connectAsync","errorMsg","licensePath","licenseRevision","applyAsync","objSettings","header","footer","pageSetup","ps","units","SetMarginMeasure","orientation","margins","m","left","leftMargin","right","rightMargin","top","topMargin","bottom","bottomMargin","BackgroundPrintURL","sUrl","fnCallback","data","PrintHTMLEx","BackgroundPrintURL2","BackgroundPrintHTML","sHtml","DirectPrintString","sPrinterName","sData","rawPrinter","rawPrinting","printer","printString","DirectPrintDocument","printDocument","baseURL","PageSetup","PrintSetup","PageSetup2","dlgOK","PrintSetup2","WaitForSpoolingComplete","setTimeout","CloseWindow","oWindow","close","HasOrientation","GetAvailablePrinters","name","plist","Array","EnumPrinters","push","sComponent","Object","c","d","s","ScriptXVersion","SecurityManagerVersion","strComponentName","strVersionRequired","topLeveNs","licensing","LicMgr","findSecMgr","License","result","validLicense","GetLicenseAsync","lookupError","ErrorMessage","this","ReportError","msg","errMsg","eMsg","arguments","reportError","errorLicenseMsgs","eIndex","msgSuffix","toString","toUpperCase","l","secmgr"],"sourceRoot":""}